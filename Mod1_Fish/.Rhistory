rm(list = ls())
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
if(!require("tidyverse")) install.packages("tidyverse") #how you install a package (only need to do this once on your computer)
library(tidyverse) #how to load in a package that has already been installed
#fish <- read.csv("fish_1998.csv", header = TRUE, sep = ',')
load("fish_1998.RData")
fish <- fish_1998
View(fish)
head(fish) #just shows the column names and the first few rows of the data
dim(fish) #shows the dimensions of the dataset, which will be important later on
mean(fish$mercury)
#you can see that $ is how you tell R what variable/column you want to work with
median(fish$mercury) #for students, can just be given median() and then they have to fill in fish$mercury
summary(fish$mercury)
#1st Qu. and 3rd Qu. refer to the 1st and 3rd "Quartiles". Don't worry too much about quartiles right now, but if you're curious, they represent a quarter of the data. They basically tell you that 25% of the data is between that value, the Median, and either the Min. (1st Qu.) or Max. (3rd Qu.).
# For this plot, we want to see the distributions of lengths across the fish and how many of them are above 50 cm.
ggplot(fish_1998, aes(y=length, x= "fish"))+
# x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
geom_hline(yintercept = 50, color= "red")+
geom_jitter(width = 0.1)
# the jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above 50 cm. To see the difference, try geom_point () and then geom_jitter ()!
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_hline(yintercept = 4, color= "red")
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot #what we want to see on each axis, in this case x= length and y= mercury.
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#Since ggplot is just a function to create plots, we need to further specify
#what kind of plot it should create. We can do this by using the geom_point
#function. Because we are making a scatter plot, we use the function geom_point().
#We can also add a few more parameters to the graph, such as changing the color
#of the points (color = 'blue), or the size of them (size [2]).
geom_point(color = 'blue', size = 2) +
ggtitle('mercury levels in 1998') +
#We can also add shapes to the plot. Here we added a dashed line to show where
#the EPA's guideline for unsafe levels of mercury in fish would fall. To create
#this we used the geom_hline function which simply creates a horizontal line at
#a y-intercept that you set. We can also adjust the color and appearance of the
#line with linetype and color.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')
p1
# getwd()
# setwd()
# list.files()
library(tidyverse)
#We will need to use a new package today that we haven't installed before called
#patchwork.
if(!require("patchwork")) install.packages("patchwork")
library(patchwork)
#fish <- read.csv("fish_2023.csv", header = TRUE, sep = ',')
load("fish_2023.RData")
fish_2 <- fish_2023
