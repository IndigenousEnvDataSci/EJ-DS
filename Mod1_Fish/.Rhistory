rm(list = ls())
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
if(!require("tidyverse")) install.packages("tidyverse") #how you install a package (only need to do this once on your computer)
library(tidyverse) #how to load in a package that has already been installed
#fish <- read.csv("fish_1998.csv", header = TRUE, sep = ',')
load("fish_1998.RData")
fish <- fish_1998
View(fish)
head(fish) #just shows the column names and the first few rows of the data
dim(fish) #shows the dimensions of the dataset, which will be important later on
mean(fish$mercury)
#you can see that $ is how you tell R what variable/column you want to work with
median(fish$mercury) #for students, can just be given median() and then they have to fill in fish$mercury
summary(fish$mercury)
#1st Qu. and 3rd Qu. refer to the 1st and 3rd "Quartiles". Don't worry too much about quartiles right now, but if you're curious, they represent a quarter of the data. They basically tell you that 25% of the data is between that value, the Median, and either the Min. (1st Qu.) or Max. (3rd Qu.).
# For this plot, we want to see the distributions of lengths across the fish and how many of them are above 50 cm.
ggplot(fish_1998, aes(y=length, x= "fish"))+
# x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
geom_hline(yintercept = 50, color= "red")+
geom_jitter(width = 0.1)
# the jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above 50 cm. To see the difference, try geom_point () and then geom_jitter ()!
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_hline(yintercept = 4, color= "red")
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot #what we want to see on each axis, in this case x= length and y= mercury.
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#Since ggplot is just a function to create plots, we need to further specify
#what kind of plot it should create. We can do this by using the geom_point
#function. Because we are making a scatter plot, we use the function geom_point().
#We can also add a few more parameters to the graph, such as changing the color
#of the points (color = 'blue), or the size of them (size [2]).
geom_point(color = 'blue', size = 2) +
ggtitle('mercury levels in 1998') +
#We can also add shapes to the plot. Here we added a dashed line to show where
#the EPA's guideline for unsafe levels of mercury in fish would fall. To create
#this we used the geom_hline function which simply creates a horizontal line at
#a y-intercept that you set. We can also adjust the color and appearance of the
#line with linetype and color.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')
p1
# getwd()
# setwd()
# list.files()
library(tidyverse)
#We will need to use a new package today that we haven't installed before called
#patchwork.
if(!require("patchwork")) install.packages("patchwork")
library(patchwork)
#fish <- read.csv("fish_2023.csv", header = TRUE, sep = ',')
load("fish_2023.RData")
fish_2 <- fish_2023
#fish <- read.csv("fish_2023.csv", header = TRUE, sep = ',')
load("fish_2023.RData")
fish_2 <- fish_2023
View(fish_2)
head() #Fill in the parentheses
rm(list = ls())
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
if(!require("tidyverse")) install.packages("tidyverse") #how you install a package (only need to do this once on your computer)
library(tidyverse) #how to load in a package that has already been installed
#fish <- read.csv("fish_1998.csv", header = TRUE, sep = ',')
load("fish_1998.RData")
fish <- fish_1998
View(fish)
head(fish) #just shows the column names and the first few rows of the data
dim(fish) #shows the dimensions of the dataset, which will be important later on
mean(fish$mercury)
#you can see that $ is how you tell R what variable/column you want to work with
median(fish$mercury) #for students, can just be given median() and then they have to fill in fish$mercury
summary(fish$mercury)
#1st Qu. and 3rd Qu. refer to the 1st and 3rd "Quartiles". Don't worry too much about quartiles right now, but if you're curious, they represent a quarter of the data. They basically tell you that 25% of the data is between that value, the Median, and either the Min. (1st Qu.) or Max. (3rd Qu.).
# For this plot, we want to see the distributions of lengths across the fish and how many of them are above 50 cm.
ggplot(fish_1998, aes(y=length, x= "fish"))+
# x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
geom_hline(yintercept = 50, color= "red")+
geom_jitter(width = 0.1)
# the jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above 50 cm. To see the difference, try geom_point () and then geom_jitter ()!
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_hline(yintercept = 4, color= "red")
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot #what we want to see on each axis, in this case x= length and y= mercury.
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#Since ggplot is just a function to create plots, we need to further specify
#what kind of plot it should create. We can do this by using the geom_point
#function. Because we are making a scatter plot, we use the function geom_point().
#We can also add a few more parameters to the graph, such as changing the color
#of the points (color = 'blue), or the size of them (size [2]).
geom_point(color = 'blue', size = 2) +
ggtitle('mercury levels in 1998') +
#We can also add shapes to the plot. Here we added a dashed line to show where
#the EPA's guideline for unsafe levels of mercury in fish would fall. To create
#this we used the geom_hline function which simply creates a horizontal line at
#a y-intercept that you set. We can also adjust the color and appearance of the
#line with linetype and color.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')
p1
# getwd()
# setwd()
# list.files()
library(tidyverse)
#We will need to use a new package today that we haven't installed before called
#patchwork.
if(!require("patchwork")) install.packages("patchwork")
library(patchwork)
#fish <- read.csv("fish_2023.csv", header = TRUE, sep = ',')
load("fish_2023.RData")
fish_2 <- fish_2023
View(fish_2)
head() #Fill in the parentheses
#Call "ggplot" followed by the "aes() argument. Which data would
#go on the x and y axis?
p2<- ggplot(fish_2023, aes(x = length, y = mercury)) +
#Now it's time to specify which plot we want ggplot to make. A scatterplot
#would be good to visualize our data, so we will call "geom_point()". In the
#parentheses, we can specify extra details about how we want the graph to appear.
#Here, we will set the color to green, and the size of the points to 2.
geom_point(color = 'green', size = 2) +
ggtitle('mercury levels in 2023')+
#To truly understand if efforts to clean up the waterways made a difference in
#mercury concentrations in the fish, we will again place a dashed line on the
#graph where the EPA deems the unsafe level of mercury in fish would be. We will
#do this by calling geom_hline, then setting the y-intercept of where we want the
#line to be placed, set the "linetype" and set the "color" of the line.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')
#Call "ggplot" followed by the "aes() argument. Which data would
#go on the x and y axis?
p2<- ggplot(fish_2023, aes(x = length, y = mercury)) +
#Now it's time to specify which plot we want ggplot to make. A scatterplot
#would be good to visualize our data, so we will call "geom_point()". In the
#parentheses, we can specify extra details about how we want the graph to appear.
#Here, we will set the color to green, and the size of the points to 2.
geom_point(color = 'green', size = 2) +
ggtitle('mercury levels in 2023')+
#To truly understand if efforts to clean up the waterways made a difference in
#mercury concentrations in the fish, we will again place a dashed line on the
#graph where the EPA deems the unsafe level of mercury in fish would be. We will
#do this by calling geom_hline, then setting the y-intercept of where we want the
#line to be placed, set the "linetype" and set the "color" of the line.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')
p1 + p2 #plot from 1998 next to plot from 2023
# For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's reccomended levels
# x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
# the jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above 50 cm. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
geom_hline(yintercept = 4, color= "red")
help("geom_boxplot")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot()
geom_hline(yintercept = 4, color= "red")
help(alpha)
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 1)
geom_hline(yintercept = 4, color= "red")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5)
geom_hline(yintercept = 4, color= "red")
#For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's recommended levels
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot what we want to see on each axis, in this case x= 'fish' and y= mercury. x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
#Since ggplot is just a function to create plots, we need to further specify what kind of plot it should create. We can do this by using the geom_jitter function, which will create the Ribbon plot seen below. We can also add a few more parameters to the graph, such as changing the width of the points (width = 0.1).
#The jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above the unsafe mercury level. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
#We can also add shapes to the plot. Here we added a line to show where  the EPA's guideline for unsafe levels of mercury in fish would fall. To create  this we used the geom_hline function which simply creates a horizontal line at a y-intercept that you set. We can also adjust the color and appearance of the line with color = 'red'.
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
help("theme")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="chartreuse3")
geom_hline(yintercept = 4, color= "red")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="cdarkolivegreen4")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="darkolivegreen4")
geom_hline(yintercept = 4, color= "red")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="dodgerblue2")
geom_hline(yintercept = 4, color= "red")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="dodgerblue2")
geom_hline(yintercept = 4, color= "red")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.5, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.3, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.7, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.9, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.1, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.2, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, color= "red")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red")+
theme_minimal()
help("geom_hline"
help("geom_hline)
help("geom_hline")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=2)+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=.5)+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1, alpha = 0.4)+
geom_boxplot( color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
gg_title("1998 Mercury Distribution + Box Plot")
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
gg_title(1998 Mercury Distribution + Box Plot)
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
gg_title(1998 Mercury Distribution + Box Plot)+
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
gg_title("1998 Mercury Distribution + Box Plot")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
title("1998 Mercury Distribution + Box Plot")+
theme_minimal()
Help(xlab)
help("xlab")
p<-ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
theme_minimal()
p + labs(title = "1998 Mercury Distribution + Box Plot")
ggplot (fish_1998, aes(x= 'fish', y= mercury), ggtitle("1998 Mercury Distribution + Box Plot"))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
xlab("fish")
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
xlab("fish")+
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
xlab("fish")+
ylab(mercury (mg/g))
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
xlab("fish")+
ylab("mercury (mg/g)")
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
xlab("fish")+
ylab("mercury (mg/g)")+
ggtitle("1998 Mercury Distribution + Box Plot")
theme_minimal()
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
geom_jitter(width = 0.1)+
geom_boxplot(alpha = 0.4, color="dodgerblue2")+
geom_hline(yintercept = 4, linetype= "dashed", color= "red", size=1)+
xlab("fish")+
ylab("mercury (mg/g)")+
ggtitle("1998 Mercury Distribution + Box Plot")+
theme_minimal()
#For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's recommended levels
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot what we want to see on each axis, in this case x= 'fish' and y= mercury. x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
g1 <- ggplot (fish_1998, aes(x= 'fish', y= mercury))+
#Since ggplot is just a function to create plots, we need to further specify what kind of plot it should create. We can do this by using the geom_jitter function, which will create the Ribbon plot seen below. We can also add a few more parameters to the graph, such as changing the width of the points (width = 0.1).
#The jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above the unsafe mercury level. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
#We can also add shapes to the plot. Here we added a line to show where  the EPA's guideline for unsafe levels of mercury in fish would fall. To create  this we used the geom_hline function which simply creates a horizontal line at a y-intercept that you set. We can also adjust the color and appearance of the line with color = 'red'.
geom_hline(yintercept = 4, color= "red")+
xlab("fish")+
ylab("mercury (mg/g)")+
ggtitle("1998 Mercury Distribution + Box Plot")+
#This adjusts the non-data components of the plot, so the titles, labels, background, and legends among other aspects.
theme_minimal()
#For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's recommended levels
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot what we want to see on each axis, in this case x= 'fish' and y= mercury. x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
g1 <- ggplot (fish_1998, aes(x= 'fish', y= mercury))+
#Since ggplot is just a function to create plots, we need to further specify what kind of plot it should create. We can do this by using the geom_jitter function, which will create the Ribbon plot seen below. We can also add a few more parameters to the graph, such as changing the width of the points (width = 0.1).
#The jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above the unsafe mercury level. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
#We can also add shapes to the plot. Here we added a line to show where  the EPA's guideline for unsafe levels of mercury in fish would fall. To create  this we used the geom_hline function which simply creates a horizontal line at a y-intercept that you set. We can also adjust the color and appearance of the line with color = 'red'.
geom_hline(yintercept = 4, color= "red")+
xlab("fish")+
ylab("mercury (mg/g)")+
ggtitle("1998 Mercury Distribution + Box Plot")+
#This adjusts the non-data components of the plot, so the titles, labels, background, and legends among other aspects.
theme_minimal()
#For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's recommended levels
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot what we want to see on each axis, in this case x= 'fish' and y= mercury. x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
#Since ggplot is just a function to create plots, we need to further specify what kind of plot it should create. We can do this by using the geom_jitter function, which will create the Ribbon plot seen below. We can also add a few more parameters to the graph, such as changing the width of the points (width = 0.1).
#The jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above the unsafe mercury level. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
#We can also add shapes to the plot. Here we added a line to show where  the EPA's guideline for unsafe levels of mercury in fish would fall. To create  this we used the geom_hline function which simply creates a horizontal line at a y-intercept that you set. We can also adjust the color and appearance of the line with color = 'red'.
geom_hline(yintercept = 4, color= "red")+
xlab("fish")+
ylab("mercury (mg/g)")+
ggtitle("1998 Mercury Distribution + Box Plot")+
#This adjusts the non-data components of the plot, so the titles, labels, background, and legends among other aspects.
theme_minimal()
#For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's recommended levels
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot what we want to see on each axis, in this case x= 'fish' and y= mercury. x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
#Since ggplot is just a function to create plots, we need to further specify what kind of plot it should create. We can do this by using the geom_jitter function, which will create the Ribbon plot seen below. We can also add a few more parameters to the graph, such as changing the width of the points (width = 0.1).
#The jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above the unsafe mercury level. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
#We can also add shapes to the plot. Here we added a line to show where  the EPA's guideline for unsafe levels of mercury in fish would fall. To create  this we used the geom_hline function which simply creates a horizontal line at a y-intercept that you set. We can also adjust the color and appearance of the line with color = 'red'.
geom_hline(yintercept = 4, color= "red")+
#This allows us to relabel the x-axis
xlab("fish")+
#This allows us to relabel the y-axis
ylab("mercury (mg/g)")+
#This allows us to title the graph
ggtitle("1998 Mercury Distribution + Box Plot")+
#This adjusts the non-data components of the plot, so the titles, labels, background, and legends among other aspects.
theme_minimal()
#We call ggplot to create a graph, tell it what data we are using, and set length at the x-axis and mercury as the y-axis
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#We then need to tell ggplot what kind of graph we are making, so we add geom_point for a scatterplot. We adjust the color of the points and their size
geom_point(color = 'blue', size = 2) +
#Label the x-axis
xlab("length (cm)")+
#Label the y-axis
ylab("mercury (ug/g)")+
#Title the graph
ggtitle("Mercury (ug/g) vs. Length (cm) (1998)")+
#We can also add shapes to the plot. Here we added a dashed line to show where
#the EPA's guideline for unsafe levels of mercury in fish would fall. To create
#this we used the geom_hline function which simply creates a horizontal line at
#a y-intercept that you set. We can also adjust the color and appearance of the
#line with linetype and color.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')
p1
#For this plot, we want to see the distributions of mercury in the fish and how many of them are above the EPA's recommended levels
#ggplot is the function that we are using to create a plot. aes() is used to tell ggplot what we want to see on each axis, in this case x= 'fish' and y= mercury. x="fish" indicates that the x axis doesn't have a variable and is titled fish. This allows us to look at the variation in lengths of fish independent of another variable.
ggplot (fish_1998, aes(x= 'fish', y= mercury))+
#Since ggplot is just a function to create plots, we need to further specify what kind of plot it should create. We can do this by using the geom_jitter function, which will create the Ribbon plot seen below. We can also add a few more parameters to the graph, such as changing the width of the points (width = 0.1).
#The jitter plot is a variation on the scatterplot, but it separates the data so that we can distinguish how many points are above the unsafe mercury level. To see the difference, try geom_point () and then geom_jitter ()!
geom_jitter(width = 0.1)+
#We can also add shapes to the plot. Here we added a line to show where  the EPA's guideline for unsafe levels of mercury in fish would fall. To create  this we used the geom_hline function which simply creates a horizontal line at a y-intercept that you set. We can also adjust the color and appearance of the line with color = 'red'.
geom_hline(yintercept = 4, color= "red")+
#This allows us to relabel the x-axis
xlab("fish")+
#This allows us to relabel the y-axis
ylab("mercury (mu/g)")+
#This allows us to title the graph
ggtitle("1998 Mercury Distribution")+
#This adjusts the non-data components of the plot, so the titles, labels, background, and legends among other aspects.
theme_minimal()
#We call ggplot to create a graph, tell it what data we are using, and set length at the x-axis and mercury as the y-axis
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#We then need to tell ggplot what kind of graph we are making, so we add geom_point for a scatterplot. We adjust the color of the points and their size
geom_point(color = 'blue', size = 2) +
#Label the x-axis
xlab("length (cm)")+
#Label the y-axis
ylab("mercury (ug/g)")+
#Title the graph
ggtitle("Mercury (ug/g) vs. Length (cm) (1998)")+
#We can also add shapes to the plot. Here we added a dashed line to show where
#the EPA's guideline for unsafe levels of mercury in fish would fall. To create
#this we used the geom_hline function which simply creates a horizontal line at
#a y-intercept that you set. We can also adjust the color and appearance of the
#line with linetype and color.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')+
theme_minimal
#We call ggplot to create a graph, tell it what data we are using, and set length at the x-axis and mercury as the y-axis
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#We then need to tell ggplot what kind of graph we are making, so we add geom_point for a scatterplot. We adjust the color of the points and their size
geom_point(color = 'blue', size = 2) +
#Label the x-axis
xlab("length (cm)")+
#Label the y-axis
ylab("mercury (ug/g)")+
#Title the graph
ggtitle("Mercury (ug/g) vs. Length (cm) (1998)")+
#We can also add shapes to the plot. Here we added a dashed line to show where
#the EPA's guideline for unsafe levels of mercury in fish would fall. To create
#this we used the geom_hline function which simply creates a horizontal line at
#a y-intercept that you set. We can also adjust the color and appearance of the
#line with linetype and color.
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')+
theme_minimal()
p1
#We call ggplot to create a graph, tell it what data we are using, and set length at the x-axis and mercury as the y-axis. We assign the graph a label/value so that we can easily access it later in the module.
p1<- ggplot(fish_1998, aes(x = length, y = mercury)) +
#We then need to tell ggplot what kind of graph we are making, so we add geom_point for a scatterplot. We adjust the color of the points and their size
geom_point(color = 'blue', size = 2) +
#Label the x-axis
xlab("length (cm)")+
#Label the y-axis
ylab("mercury (ug/g)")+
#Title the graph
ggtitle("Mercury (ug/g) vs. Length (cm) (1998)")+
#We add a dotted line to represent the EPA's recommended mercury level and then adjusted the color and type of line
geom_hline(yintercept = 4.5, linetype= "dashed", color = 'red')+
#Adjusted the theme of the graph
theme_minimal()
#Because we assigned the graph a label, we have to call that label
p1
